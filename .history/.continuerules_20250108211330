# ContinueRules

## Project setup

### Project finishline

- [ ] Monica bot can succesfully read obsidian vault files
- [ ] Monica bot can succesfully create obsidian vault files
- [ ] Monica bot can succesfully overwrite obsidian vault files
- [ ] Monica bot can succesfully delete obsidian vault files
- [ ] Monica bot can see we haven't created a standup note for today and will create it + copy relevant notes from last time.

### Python code

- Gebruik type hints.
- Zorg dat ik niet vergeet om pyproject.toml en poetry te gebruiken.
- Eveneens pydantic met BaseSettings voor het inlezen van .env
- SOLID principes
- Dependecy injection
- Laten we alles doen om circular dependency problemen te voorkomen.
- Maak gebruik van relative imports binnen modules
- main.py als startpunt

#### Voorkom circular dependencies

Gebruik Abstract Base Classes:
Definieer interfaces in een apart bestand
Implementeer concrete klassen in verschillende bestanden
Dependency Injection:
Injecteer dependencies via constructors
Vermijd het direct instantiëren van services binnen klassen

#### Gebruik __init__.py slim

from .models import UserModel
from .services import UserService
__all__ = ['UserModel', 'UserService']

#### Required Structuur (is mogelijk nog niet zo)

TalkToObsidian/
│
├── src/                    # Hoofdmap voor broncode
│   ├── __init__.py
│   ├── main.py            # Startpunt
│   ├── core/              # Core functionaliteit
│   │   ├── __init__.py
│   │   ├── models.py
│   │   └── services.py
│   │
│   ├── utils/             # Hulpprogramma's
│   │   ├── __init__.py
│   │   └── helpers.py
│   │
│   └── api/               # API-gerelateerde code
│       ├── __init__.py
│       └── endpoints.py
│
├── tests/                 # Testmap
│   └── __init__.py
│
└── setup.py              # Project configuratie

#### Dependency injection voorbeeld

class UserService:
    def __init__(self, email_service):
        self.email_service = email_service

email_service = EmailService()
user_service = UserService(email_service)

#### Gebruik interfaces

from abc import ABC, abstractmethod

class IEmailService(ABC):
    @abstractmethod
    def send_email(self):
        pass

class EmailService(IEmailService):
    def send_email(self):
        pass

#### DONT DO THIS

from email_service import EmailService  # ❌ Directe import

class User:
    def __init__(self):
        self.email_service = EmailService()  # ❌ Directe instantiatie
